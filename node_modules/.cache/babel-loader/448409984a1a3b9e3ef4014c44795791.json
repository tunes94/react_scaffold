{"ast":null,"code":"import { Actions } from \"./types\";\nconst INITIAL_STATE = {\n  toDos: []\n};\nexport default function challenge35Reducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case Actions.ADD_TODO:\n      {\n        // throw {};\n        return {\n          toDos: [...state.toDos, {\n            text: action.payload.text,\n            todo_state: false,\n            todo_id: Math.floor(Math.random() * 1000)\n          }]\n        };\n      }\n\n    case Actions.EDIT_TODO:\n      {\n        let idSelected = action.payload.todo_id;\n        let toDosCopy = [...state.toDos];\n        toDosCopy.forEach(toDo => {\n          if (idSelected === toDo.todo_id) {\n            toDo.todo_state = !toDo.todo_state;\n          }\n\n          return toDo;\n        });\n        return {\n          toDos: toDosCopy\n        };\n      }\n\n    case Actions.DELETE_TODO:\n      {\n        let idSelected = action.payload.todo_id;\n        let toDosCopy = [...state.toDos];\n        let filteredToDos = toDosCopy.filter(todo => todo.todo_id !== idSelected);\n        console.log(filteredToDos);\n        return {\n          toDos: filteredToDos\n        };\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/E5854/Documents/GitHub/react_scaffold/src/store/Challenge35/reducer.tsx"],"names":["Actions","INITIAL_STATE","toDos","challenge35Reducer","state","action","type","ADD_TODO","text","payload","todo_state","todo_id","Math","floor","random","EDIT_TODO","idSelected","toDosCopy","forEach","toDo","DELETE_TODO","filteredToDos","filter","todo","console","log"],"mappings":"AAAA,SAASA,OAAT,QAAwB,SAAxB;AAYA,MAAMC,aAAmC,GAAG;AAC1CC,EAAAA,KAAK,EAAE;AADmC,CAA5C;AAIA,eAAe,SAASC,kBAAT,CAA4BC,KAAK,GAAGH,aAApC,EAAmDI,MAAnD,EAAgE;AAC7E,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,OAAO,CAACO,QAAb;AAAuB;AACrB;AACA,eAAO;AACLL,UAAAA,KAAK,EAAE,CACL,GAAGE,KAAK,CAACF,KADJ,EAEL;AACEM,YAAAA,IAAI,EAAEH,MAAM,CAACI,OAAP,CAAeD,IADvB;AAEEE,YAAAA,UAAU,EAAE,KAFd;AAGEC,YAAAA,OAAO,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,IAA3B;AAHX,WAFK;AADF,SAAP;AAUD;;AACD,SAAKd,OAAO,CAACe,SAAb;AAAwB;AACtB,YAAIC,UAAU,GAAGX,MAAM,CAACI,OAAP,CAAeE,OAAhC;AACA,YAAIM,SAAiB,GAAG,CAAC,GAAGb,KAAK,CAACF,KAAV,CAAxB;AAEAe,QAAAA,SAAS,CAACC,OAAV,CAAmBC,IAAD,IAAgB;AAChC,cAAIH,UAAU,KAAKG,IAAI,CAACR,OAAxB,EAAiC;AAC/BQ,YAAAA,IAAI,CAACT,UAAL,GAAkB,CAACS,IAAI,CAACT,UAAxB;AACD;;AACD,iBAAOS,IAAP;AACD,SALD;AAMA,eAAO;AACLjB,UAAAA,KAAK,EAAEe;AADF,SAAP;AAGD;;AACD,SAAKjB,OAAO,CAACoB,WAAb;AAA0B;AACxB,YAAIJ,UAAU,GAAGX,MAAM,CAACI,OAAP,CAAeE,OAAhC;AACA,YAAIM,SAAiB,GAAG,CAAC,GAAGb,KAAK,CAACF,KAAV,CAAxB;AACA,YAAImB,aAAyB,GAAGJ,SAAS,CAACK,MAAV,CAC9BC,IAAI,IAAIA,IAAI,CAACZ,OAAL,KAAiBK,UADK,CAAhC;AAGAQ,QAAAA,OAAO,CAACC,GAAR,CAAYJ,aAAZ;AAEA,eAAO;AAAEnB,UAAAA,KAAK,EAAEmB;AAAT,SAAP;AACD;;AACD;AACE,aAAOjB,KAAP;AAvCJ;AAyCD","sourcesContent":["import { Actions } from \"./types\";\r\n\r\nexport interface ToDo {\r\n  text: string;\r\n  todo_state: boolean;\r\n  todo_id: number;\r\n}\r\n\r\ninterface initiaLStateInteface {\r\n  toDos: ToDo[];\r\n}\r\n\r\nconst INITIAL_STATE: initiaLStateInteface = {\r\n  toDos: []\r\n};\r\n\r\nexport default function challenge35Reducer(state = INITIAL_STATE, action: any) {\r\n  switch (action.type) {\r\n    case Actions.ADD_TODO: {\r\n      // throw {};\r\n      return {\r\n        toDos: [\r\n          ...state.toDos,\r\n          {\r\n            text: action.payload.text,\r\n            todo_state: false,\r\n            todo_id: Math.floor(Math.random() * 1000)\r\n          }\r\n        ]\r\n      };\r\n    }\r\n    case Actions.EDIT_TODO: {\r\n      let idSelected = action.payload.todo_id;\r\n      let toDosCopy: ToDo[] = [...state.toDos];\r\n\r\n      toDosCopy.forEach((toDo: ToDo) => {\r\n        if (idSelected === toDo.todo_id) {\r\n          toDo.todo_state = !toDo.todo_state;\r\n        }\r\n        return toDo;\r\n      });\r\n      return {\r\n        toDos: toDosCopy\r\n      };\r\n    }\r\n    case Actions.DELETE_TODO: {\r\n      let idSelected = action.payload.todo_id;\r\n      let toDosCopy: ToDo[] = [...state.toDos];\r\n      let filteredToDos: ToDo | any = toDosCopy.filter(\r\n        todo => todo.todo_id !== idSelected\r\n      );\r\n      console.log(filteredToDos);\r\n\r\n      return { toDos: filteredToDos };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}